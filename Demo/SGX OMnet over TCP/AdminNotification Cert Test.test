<?xml version="1.1" encoding="ASCII"?>
<TestUnit:TestContainerType xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:CertificationCommands="com.esprow.nozomi.testunit.commands.certification" xmlns:TestUnit="com.esprow.nozomi.testunit" formatVersion="2.1">
  <test comment="This certification test focuses on the Login and Logout functionality.&#xD;&#xA;&#xD;&#xA;In particular, it checks if your system supports logging in and out correctly, and handling error messages for invalid login attempts and locked or suspended account.&#xD;&#xA;It also makes sure that your system behaves according to the specifications in terms of the frequency of login attempts it tries to submit, and whether it stops trying to log in, in case a login is not possible (i.e. when the account has been locked or suspended).&#xD;&#xA;&#xD;&#xA;Please make sure that your system is NOT connected to the SGX TITAN environment when you begin the test." loggingLevel="DEBUG" certificationUnit="true" dictionary="SGX_OMnet" implementsBridgeMode="true">
    <testCommand xsi:type="CertificationCommands:CreateMessageRelayCommand" targetSystemId="%CONFIGURATIONS.CERTIFICATION.SYSTEM%" targetHandlerId="%CONFIGURATIONS.CERTIFICATION.DESTINATION%" forwardSystemId="%CONFIGURATIONS.CERTIFICATION.BRIDGE.SYSTEM%" forwardHandlerId="%CONFIGURATIONS.CERTIFICATION.BRIDGE.DESTINATION%" filterShowOnly="true" validateMessages="true">
      <messageTypeFilters>LOGIN</messageTypeFilters>
      <messageTypeFilters>LOGIN_ANSWER</messageTypeFilters>
      <messageTypeFilters>LOGIN_ENCRYPTED_ANSWER</messageTypeFilters>
      <messageTypeFilters>LOGIN_DEPRECATED</messageTypeFilters>
      <messageTypeFilters>LOGIN_ENCRYPTED</messageTypeFilters>
      <messageTypeFilters>LOGOUT</messageTypeFilters>
      <messageTypeFilters>LOGOUT_ANSWER</messageTypeFilters>
      <messageTypeFilters>MO1</messageTypeFilters>
      <messageTypeFilters>TRANSACTION_ANSWER</messageTypeFilters>
      <messageTypeFilters>BD6</messageTypeFilters>
      <messageTypeFilters>BO5</messageTypeFilters>
    </testCommand>
    <testCommand xsi:type="TestUnit:QuestionnaireCommand" disabled="true">
      <questions variableName="DQ124_Support">
        <instructionMultiLanguage key="en" value="Does your system support DQ124 to query all tradable instrument series in all markets?"/>
      </questions>
      <questions type="NUMBER" variableName="DQ120_Support">
        <instructionMultiLanguage key="en" value="Does your system support DQ120 queries to retrieve all underlyings in all markets?"/>
      </questions>
      <questions type="BOOLEAN" variableName="DQ122_Support">
        <instructionMultiLanguage key="en" value="Does your system support DQ122 queries to retrieve all instrument classes in all markets?"/>
      </questions>
      <questions type="BOOLEAN" variableName="DQ126_Support">
        <instructionMultiLanguage key="en" value="Does your system support DQ126 queries to retrieve all combinations in all markets?"/>
      </questions>
      <questions type="BOOLEAN" variableName="DQ2_Support">
        <instructionMultiLanguage key="en" value="Does your system support DQ2 queries to retrieve all instrument series in all markets?"/>
      </questions>
      <questions type="BOOLEAN" variableName="DQ3_Support">
        <instructionMultiLanguage key="en" value="Does your system support DQ3 queries to retrieve all instrument types in all markets?"/>
      </questions>
      <questions type="BOOLEAN" variableName="DQ4_Support">
        <instructionMultiLanguage key="en" value="Does your system support DQ4 queries to retrieve all underlyings in all markets?"/>
      </questions>
      <questions type="BOOLEAN" variableName="DQ5_Support">
        <instructionMultiLanguage key="en" value="Does your system support DQ5 queries to retrieve all combinations in all markets?"/>
      </questions>
      <questions type="BOOLEAN" variableName="DQ7_Support">
        <instructionMultiLanguage key="en" value="Does your system support DQ7 queries to retrieve all markets?"/>
      </questions>
      <questions type="BOOLEAN" variableName="DQ8_Support">
        <instructionMultiLanguage key="en" value="Does your system support DQ8 queries to retrieve all instrument groups in all markets?"/>
      </questions>
      <questions type="BOOLEAN" variableName="DQ10_Support">
        <instructionMultiLanguage key="en" value="Does your system support DQ10 queries to retrieve all instrument classes in all markets?"/>
      </questions>
      <questions type="BOOLEAN" variableName="DQ18_Support">
        <instructionMultiLanguage key="en" value="Does your system support DQ18 queries to retrieve non-trading days for one market?"/>
      </questions>
      <questions type="BOOLEAN" variableName="DQ24_Support">
        <instructionMultiLanguage key="en" value="Does your system support DQ24 queries to retrieve all exchanges?"/>
      </questions>
      <questions type="BOOLEAN" variableName="DQ29_Support">
        <instructionMultiLanguage key="en" value="Does your system support DQ29 queries to retrieve trading session states?"/>
      </questions>
      <questions type="BOOLEAN" variableName="DQ46_Support">
        <instructionMultiLanguage key="en" value="Does your system support DQ46 queries to retrieve all deal sources?"/>
      </questions>
      <questions type="BOOLEAN" variableName="SSO_Support">
        <instructionMultiLanguage key="en" value="Does your system support submission of Session State Orders?"/>
      </questions>
      <questions type="BOOLEAN" variableName="DQ76_Support">
        <instructionMultiLanguage key="en" value="Does your system support DQ76 queries to retrieve existing state types?"/>
      </questions>
      <questions type="BOOLEAN" variableName="DQ78_Support">
        <instructionMultiLanguage key="en" value="Does your system support DQ78 queries to retrieve exception trading days?"/>
      </questions>
      <questions type="BOOLEAN" variableName="UQ1_Support">
        <instructionMultiLanguage key="en" value="Does your system support UQ1 queries to retrieve partitions in the central system?"/>
      </questions>
      <questions type="BOOLEAN" variableName="BU122_Support">
        <instructionMultiLanguage key="en" value="Does your system support BU122 broadcasts for updated instrument class information?"/>
      </questions>
      <questions type="BOOLEAN" variableName="BU10_Support">
        <instructionMultiLanguage key="en" value="Does your system support BU10 broadcasts for updated instrument class information?"/>
      </questions>
      <questions type="BOOLEAN" variableName="BU120_Support">
        <instructionMultiLanguage key="en" value="Does your system support BU120 broadcasts for updated underlying information?"/>
      </questions>
      <questions type="BOOLEAN" variableName="BU4_Support">
        <instructionMultiLanguage key="en" value="Does your system support BU4 broadcasts for updated underlying information?"/>
      </questions>
      <questions type="BOOLEAN" variableName="BU124_Support">
        <instructionMultiLanguage key="en" value="Does your system support BU124 broadcasts for information on new options series?"/>
      </questions>
      <questions type="BOOLEAN" variableName="BU2_Support">
        <instructionMultiLanguage key="en" value="Does your system support BU2 broadcasts for information on new options series?"/>
      </questions>
      <questions type="BOOLEAN" variableName="BU126_Support">
        <instructionMultiLanguage key="en" value="Does your system support BU126 broadcasts for information on new combinations?"/>
      </questions>
      <questions type="BOOLEAN" variableName="BU5_Support">
        <instructionMultiLanguage key="en" value="Does your system support BU5 broadcasts for information on new combinations?"/>
      </questions>
      <questions type="BOOLEAN" variableName="BU18_Support">
        <instructionMultiLanguage key="en" value="Does your system support BU18 broadcasts for information on updated non-trading days and/or settlement days?"/>
      </questions>
      <questions type="BOOLEAN" variableName="BU78_Support">
        <instructionMultiLanguage key="en" value="Does your system support BU78 broadcasts for information on updated trading exception days?"/>
      </questions>
      <questions type="BOOLEAN" variableName="BU1005_Support">
        <instructionMultiLanguage key="en" value="Does your system support BU1005 broadcasts for information on new combinations?"/>
      </questions>
      <questions type="BOOLEAN" variableName="BU1002_Support">
        <instructionMultiLanguage key="en" value="Does your system support BU1002 broadcasts with information on newly generated option series?"/>
      </questions>
    </testCommand>
    <testCommand xsi:type="TestUnit:GetInteractiveFeedbackCommand" disabled="true">
      <instructionMultiLanguage key="en" value="%VARIABLES.BU1002_Support%&#xD;&#xA;%VARIABLES.DQ124_Support%&#xD;&#xA;%VARIABLES.DQ120_Support%"/>
    </testCommand>
    <testCommand xsi:type="TestUnit:GetInteractiveFeedbackCommand">
      <instructionMultiLanguage key="en" value="Please wait for the conformance support team to prepare the system for the test."/>
    </testCommand>
    <testCommand xsi:type="CertificationCommands:NotifyAdminCommand" comment="A counterparty is executing a test and is waiting for the system to be prepared.&#xD;&#xA;&#xD;&#xA;Please resolve this ticket as soon as possible, because otherwise the counterparty cannot proceed with the test." variableId="" message="XX-T001-0-1" level="LOW" waitForResolution="false"/>
    <testCommand xsi:type="TestUnit:GetInteractiveFeedbackCommand" variableId="Symbol" requireUserInput="true">
      <instructionMultiLanguage key="en" value="Please enter the symbol for which you would like to execute this test."/>
    </testCommand>
    <testCommand xsi:type="TestUnit:GetInteractiveFeedbackCommand">
      <instructionMultiLanguage key="en" value="Your desired symbol is %VARIABLES.Symbol%.&#xD;&#xA;Please wait while the conformance support team confirms which symbol you can use for the test."/>
    </testCommand>
    <testCommand xsi:type="CertificationCommands:NotifyAdminCommand" comment="A counterparty is executing a test and would like to use symbol %VARIABLES.Symbol%.&#xD;&#xA;&#xD;&#xA;Please enter the symbol they can use (if possible, the one they requested)." variableId="Admin_Symbol" message="XX-T001-0-2" level="LOW" waitForResolution="true"/>
    <testCommand xsi:type="TestUnit:GetInteractiveFeedbackCommand">
      <instructionMultiLanguage key="en" value="Please use symbol: %VARIABLES.Admin_Symbol%"/>
    </testCommand>
    <testCommand xsi:type="TestUnit:LogEntry" disabled="true" text="# Step 1"/>
    <testCommand xsi:type="TestUnit:GetInteractiveFeedbackCommand">
      <instructionMultiLanguage key="en" value="Please submit a valid Login request."/>
    </testCommand>
    <testCommand xsi:type="TestUnit:WaitCommand" messageSenderProducer="//@test/@testCommand.0" messageCount="1" timeout="-1" searchFromLastMatch="true" searchFromLastMatchCombined="true">
      <messageType>LOGIN</messageType>
      <messageType>LOGIN_DEPRECATED</messageType>
      <messageType>LOGIN_ENCRYPTED</messageType>
    </testCommand>
    <testCommand xsi:type="TestUnit:WaitCommand" messageId="" messageSenderProducer="//@test/@testCommand.0" messageCount="1" timeout="-1" searchFromLastMatch="true" searchFromLastMatchCombined="true" outgoingMessage="true">
      <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="StandardHeader.header_response_t[].header_response_t.return_value_i" value="-2033" fieldType="Integer"/>
      <messageType>LOGIN_ANSWER</messageType>
      <messageType>LOGIN_ENCRYPTED_ANSWER</messageType>
    </testCommand>
    <testCommand xsi:type="TestUnit:GetInteractiveFeedbackCommand" variableId="Response" requireUserInput="true">
      <instructionMultiLanguage key="en" value="Did you receive a message that your user ID had been locked?&#xD;&#xA;(Enter y for yes, n for no)"/>
    </testCommand>
    <testCommand xsi:type="TestUnit:IfStatementCommand">
      <testCommand xsi:type="TestUnit:IfThenElseStatementBlock" logicStatement="eval(&quot;! equalsIgnoreCase(&quot;%VARIABLES.Response%&quot;, &quot;y&quot;) &amp;&amp; ! equalsIgnoreCase(&quot;%VARIABLES.Response%&quot;, &quot;yes&quot;)&quot;)">
        <testCommand xsi:type="TestUnit:FailCommand" text="You should have received a message that your user ID has been locked."/>
      </testCommand>
    </testCommand>
    <testCommand xsi:type="TestUnit:LogEntry" disabled="true" text="# Step 2"/>
    <testCommand xsi:type="TestUnit:GetInteractiveFeedbackCommand" timeout="-1">
      <instructionMultiLanguage key="en" value="Please wait until the conformance support team unlocks your user account."/>
    </testCommand>
    <testCommand xsi:type="CertificationCommands:NotifyAdminCommand" comment="A counterparty is executing a test and requires assistance.&#xD;&#xA;&#xD;&#xA;Member:&#xD;&#xA;   Country ID: %CONFIGURATIONS.Member_Country%&#xD;&#xA;   Identity: %CONFIGURATIONS.Member_Identity%&#xD;&#xA;Series:&#xD;&#xA;   Country Code: %CONFIGURATIONS.Series_Country%&#xD;&#xA;   Market Code: %CONFIGURATIONS.Series_Market%&#xD;&#xA;   Instrument Group Code: %CONFIGURATIONS.Series_Instrument_Group%&#xD;&#xA;   Commodity Code: %CONFIGURATIONS.Series_Commodity%&#xD;&#xA;Test: XX-T001&#xD;&#xA;Step: 2&#xD;&#xA;&#xD;&#xA;Required action(s):&#xD;&#xA;- Unlock the user account of the member.&#xD;&#xA;&#xD;&#xA;Note: Please resolve this ticket as soon you have completed the required actions, otherwise the counterparty will not be able to continue the test." message="XX-T001-2: Unlock User Account" level="URGENT" waitForResolution="true"/>
    <testCommand xsi:type="TestUnit:GetInteractiveFeedbackCommand">
      <instructionMultiLanguage key="en" value="Your user account has been unlocked. Please submit a Login request with a correct password."/>
    </testCommand>
    <testCommand xsi:type="TestUnit:WaitCommand" messageSenderProducer="//@test/@testCommand.0" messageCount="1" timeout="-1" searchFromLastMatch="true" searchFromLastMatchCombined="true">
      <messageType>LOGIN</messageType>
      <messageType>LOGIN_DEPRECATED</messageType>
      <messageType>LOGIN_ENCRYPTED</messageType>
    </testCommand>
    <testCommand xsi:type="TestUnit:WaitCommand" messageId="" messageSenderProducer="//@test/@testCommand.0" messageCount="1" timeout="-1" searchFromLastMatch="true" searchFromLastMatchCombined="true" outgoingMessage="true">
      <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="StandardHeader.header_response_t[].header_response_t.return_value_i" value="0" fieldType="Integer"/>
      <messageType>LOGIN_ANSWER</messageType>
      <messageType>LOGIN_ENCRYPTED_ANSWER</messageType>
    </testCommand>
    <testCommand xsi:type="TestUnit:GetInteractiveFeedbackCommand" variableId="Response" requireUserInput="true">
      <instructionMultiLanguage key="en" value="Have you logged in successfully?&#xD;&#xA;(Enter y for yes, n for no)"/>
    </testCommand>
    <testCommand xsi:type="TestUnit:IfStatementCommand">
      <testCommand xsi:type="TestUnit:IfThenElseStatementBlock" logicStatement="eval(&quot;! equalsIgnoreCase(&quot;%VARIABLES.Response%&quot;, &quot;y&quot;) &amp;&amp; ! equalsIgnoreCase(&quot;%VARIABLES.Response%&quot;, &quot;yes&quot;)&quot;)">
        <testCommand xsi:type="TestUnit:FailCommand" text="You should have logged in successfully."/>
      </testCommand>
    </testCommand>
    <testCommand xsi:type="TestUnit:LogEntry" disabled="true" text="# Step 3"/>
    <testCommand xsi:type="TestUnit:GetInteractiveFeedbackCommand" variableId="Response" requireUserInput="true" timeout="-1">
      <instructionMultiLanguage key="en" value="Does your trading system support Limit Orders with DAY validity?&#xD;&#xA;(Enter y for yes, n for no)"/>
    </testCommand>
    <testCommand xsi:type="TestUnit:IfStatementCommand">
      <testCommand xsi:type="TestUnit:IfThenElseStatementBlock" logicStatement="eval(&quot;equalsIgnoreCase(&quot;%VARIABLES.Response%&quot;, &quot;y&quot;) || equalsIgnoreCase(&quot;%VARIABLES.Response%&quot;, &quot;yes&quot;)&quot;)">
        <testCommand xsi:type="TestUnit:GetInteractiveFeedbackCommand">
          <instructionMultiLanguage key="en" value="Please submit a Limit Order with DAY validity."/>
        </testCommand>
        <testCommand xsi:type="TestUnit:WaitCommand" messageSenderProducer="//@test/@testCommand.0" messageCount="1" timeout="-1" searchFromLastMatch="true" searchFromLastMatchCombined="true">
          <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="single_order_insert_t[].single_order_insert_t.transaction_type[].transaction_type_t.central_module_c" value="M" fieldType="Char"/>
          <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="single_order_insert_t[].single_order_insert_t.transaction_type[].transaction_type_t.server_type_c" value="O" fieldType="Char"/>
          <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="single_order_insert_t[].single_order_insert_t.transaction_type[].transaction_type_t.transaction_number_n" value="1" fieldType="BigDecimal"/>
          <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="single_order_insert_t[].single_order_insert_t.series[].series_t.country_c" value="%CONFIGURATIONS.Series_Country%" fieldType="BigDecimal"/>
          <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="single_order_insert_t[].single_order_insert_t.series[].series_t.market_c" value="%CONFIGURATIONS.Series_Market%" fieldType="BigDecimal"/>
          <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="single_order_insert_t[].single_order_insert_t.series[].series_t.instrument_group_c" value="%CONFIGURATIONS.Series_Instrument_Group%" fieldType="BigDecimal"/>
          <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="single_order_insert_t[].single_order_insert_t.series[].series_t.commodity_n" value="%CONFIGURATIONS.Series_Commodity%" fieldType="BigDecimal"/>
          <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="single_order_insert_t[].single_order_insert_t.series[].series_t.expiration_date_n" value="%CONFIGURATIONS.Series_Expiration_Date%" fieldType="BigDecimal"/>
          <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="vim_subitems[].vim_subitem[*].basic_order_t[].basic_order_t.time_validity_n" value="256" fieldType="BigDecimal"/>
          <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="vim_subitems[].vim_subitem[*].basic_order_t[].basic_order_t.order_type_c" value="1" fieldType="BigDecimal"/>
          <messageType>MO1</messageType>
        </testCommand>
        <testCommand xsi:type="TestUnit:WaitCommand" messageId="" messageSenderProducer="//@test/@testCommand.0" messageCount="1" timeout="-1" searchFromLastMatch="true" searchFromLastMatchCombined="true" outgoingMessage="true">
          <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="StandardHeader.header_response_t[].header_response_t.return_value_i" value="0" checkType="GREATER_OR_EQUAL" fieldType="Integer"/>
          <messageType>TRANSACTION_ANSWER</messageType>
        </testCommand>
        <testCommand xsi:type="TestUnit:WaitCommand" messageSenderProducer="//@test/@testCommand.0" messageCount="1" timeout="-1" searchFromLastMatch="true" searchFromLastMatchCombined="true" outgoingMessage="true">
          <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="broadcast_hdr_t[].broadcast_hdr_t.broadcast_type[].broadcast_type_t.central_module_c" value="B" fieldType="Char"/>
          <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="broadcast_hdr_t[].broadcast_hdr_t.broadcast_type[].broadcast_type_t.server_type_c" value="O" fieldType="Char"/>
          <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="broadcast_hdr_t[].broadcast_hdr_t.broadcast_type[].broadcast_type_t.transaction_number_n" value="5" fieldType="BigDecimal"/>
          <messageType>BO5</messageType>
        </testCommand>
        <testCommand xsi:type="TestUnit:GetInteractiveFeedbackCommand" variableId="Response" requireUserInput="true">
          <instructionMultiLanguage key="en" value="Did you receive a response from MO1 that the transaction was successful, and a BO5 broadcast with information of the placed order?&#xD;&#xA;(Enter y for yes, n for no)"/>
        </testCommand>
        <testCommand xsi:type="TestUnit:IfStatementCommand">
          <testCommand xsi:type="TestUnit:IfThenElseStatementBlock" logicStatement="eval(&quot;! equalsIgnoreCase(&quot;%VARIABLES.Response%&quot;, &quot;y&quot;) &amp;&amp; ! equalsIgnoreCase(&quot;%VARIABLES.Response%&quot;, &quot;yes&quot;)&quot;)">
            <testCommand xsi:type="TestUnit:FailCommand" text="You should have received a response from MO1 that the transaction was successful, and a BO5 broadcast with information of the placed order."/>
          </testCommand>
        </testCommand>
      </testCommand>
    </testCommand>
    <testCommand xsi:type="TestUnit:LogEntry" disabled="true" text="# Step 4"/>
    <testCommand xsi:type="TestUnit:GetInteractiveFeedbackCommand" timeout="-1">
      <instructionMultiLanguage key="en" value="Please wait until the conformance support team submits an order to trade off with your existing active order. Afterwards, please confirm that you receive a BD6 broadcast about the trade."/>
    </testCommand>
    <testCommand xsi:type="CertificationCommands:NotifyAdminCommand" comment="A counterparty is executing a test and requires assistance.&#xD;&#xA;&#xD;&#xA;Member:&#xD;&#xA;   Country ID: %CONFIGURATIONS.Member_Country%&#xD;&#xA;   Identity: %CONFIGURATIONS.Member_Identity%&#xD;&#xA;Series:&#xD;&#xA;   Country Code: %CONFIGURATIONS.Series_Country%&#xD;&#xA;   Market Code: %CONFIGURATIONS.Series_Market%&#xD;&#xA;   Instrument Group Code: %CONFIGURATIONS.Series_Instrument_Group%&#xD;&#xA;   Commodity Code: %CONFIGURATIONS.Series_Commodity%&#xD;&#xA;Test: XX-T001&#xD;&#xA;Step: 4&#xD;&#xA;&#xD;&#xA;Required action(s):&#xD;&#xA;- Submit an order to trade-off with one of the existing active orders of the member." message="XX-T001-4: Trade-Off with Member's Order" level="URGENT" waitForResolution="false"/>
    <testCommand xsi:type="TestUnit:WaitCommand" messageSenderProducer="//@test/@testCommand.0" messageCount="1" timeout="-1" searchFromLastMatch="true" searchFromLastMatchCombined="true" outgoingMessage="true">
      <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="broadcast_hdr_t[].broadcast_hdr_t.broadcast_type[].broadcast_type_t.central_module_c" value="B" fieldType="Char"/>
      <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="broadcast_hdr_t[].broadcast_hdr_t.broadcast_type[].broadcast_type_t.server_type_c" value="D" fieldType="Char"/>
      <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="broadcast_hdr_t[].broadcast_hdr_t.broadcast_type[].broadcast_type_t.transaction_number_n" value="6" fieldType="BigDecimal"/>
      <messageType>BD6</messageType>
    </testCommand>
    <testCommand xsi:type="TestUnit:GetInteractiveFeedbackCommand" variableId="Response" requireUserInput="true">
      <instructionMultiLanguage key="en" value="Did you receive a BD6 broadcast with information on the trade?&#xD;&#xA;(Enter y for yes, n for no)"/>
    </testCommand>
    <testCommand xsi:type="TestUnit:IfStatementCommand">
      <testCommand xsi:type="TestUnit:IfThenElseStatementBlock" logicStatement="eval(&quot;! equalsIgnoreCase(&quot;%VARIABLES.Response%&quot;, &quot;y&quot;) &amp;&amp; ! equalsIgnoreCase(&quot;%VARIABLES.Response%&quot;, &quot;yes&quot;)&quot;)">
        <testCommand xsi:type="TestUnit:FailCommand" text="You should have received a BD6 broadcast with information on the trade."/>
      </testCommand>
    </testCommand>
    <testCommand xsi:type="TestUnit:LogEntry" disabled="true" text="# Step 5"/>
    <testCommand xsi:type="TestUnit:GetInteractiveFeedbackCommand">
      <instructionMultiLanguage key="en" value="Please log out of the SGX TITAN Environment."/>
    </testCommand>
    <testCommand xsi:type="TestUnit:WaitCommand" messageSenderProducer="//@test/@testCommand.0" timeout="-1" searchFromLastMatch="true" searchFromLastMatchCombined="true">
      <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="StandardHeader.header_request_t[].header_request_t.facility_type_u" value="2" fieldType="BigDecimal"/>
      <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="StandardHeader.header_request_t[].header_request_t.parameter_u" value="0" fieldType="BigDecimal"/>
      <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="StandardHeader.header_request_t[].header_request_t.function_code_u" value="257" fieldType="BigDecimal"/>
      <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="StandardHeader.header_request_t[].header_request_t.parameter_2_u" value="0" fieldType="BigDecimal"/>
      <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="omni_logout_t[].omni_logout_t.filler_4_s" value="0,0,0,0" fieldType="BigDecimalArray"/>
      <messageType>LOGOUT</messageType>
    </testCommand>
    <testCommand xsi:type="TestUnit:WaitCommand" messageId="" messageSenderProducer="//@test/@testCommand.0" timeout="" searchFromLastMatch="true" searchFromLastMatchCombined="true" outgoingMessage="true">
      <testCommand xsi:type="TestUnit:CreateFieldValueCheckCommand" path="StandardHeader.header_response_t[].header_response_t.return_value_i" value="0" fieldType="Integer"/>
      <messageType>LOGOUT_ANSWER</messageType>
    </testCommand>
    <testCommand xsi:type="TestUnit:GetInteractiveFeedbackCommand" variableId="Response" requireUserInput="true">
      <instructionMultiLanguage key="en" value="Did you receive a message that you have logged out successfully?&#xD;&#xA;(Enter y for yes, n for no)"/>
    </testCommand>
    <testCommand xsi:type="TestUnit:IfStatementCommand">
      <testCommand xsi:type="TestUnit:IfThenElseStatementBlock" logicStatement="&quot;%VARIABLES.Response%&quot;!=&quot;y&quot; &amp;&amp; &quot;%VARIABLES.Response%&quot;!=&quot;yes&quot;">
        <testCommand xsi:type="TestUnit:FailCommand" text="You should have received a message that you have logged out successfully."/>
      </testCommand>
    </testCommand>
  </test>
</TestUnit:TestContainerType>
